name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: radio24-project
  REGION: asia-northeast1
  REGISTRY: gcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: radio24_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "apps/web/package-lock.json"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          cd apps/web
          pnpm install

      - name: Run Go tests
        run: |
          cd services/api
          go test ./...
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: radio24_test

      - name: Run Go tests (host)
        run: |
          cd services/host
          go test ./...

      - name: Run frontend tests
        run: |
          cd apps/web
          pnpm test --passWithNoTests

      - name: Run linting
        run: |
          cd apps/web
          pnpm lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push API image
        run: |
          docker build -f infra/docker/api.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:${{ github.sha }}

      - name: Build and push Web image
        run: |
          docker build -f infra/docker/web.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:${{ github.sha }}

      - name: Build and push Host image
        run: |
          docker build -f infra/docker/host.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:${{ github.sha }}

      - name: Deploy to Cloud Run (API)
        run: |
          gcloud run deploy api \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }},POSTGRES_PORT=5432,POSTGRES_USER=${{ secrets.POSTGRES_USER }},POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }},POSTGRES_DB=${{ secrets.POSTGRES_DB }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }},LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}"

      - name: Deploy to Cloud Run (Web)
        run: |
          gcloud run deploy web \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --set-env-vars "NEXT_PUBLIC_API_BASE=${{ secrets.API_BASE_URL }},NEXT_PUBLIC_OPENAI_REALTIME_MODEL=gpt-realtime"

      - name: Deploy to Cloud Run (Host)
        run: |
          gcloud run deploy host \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --no-allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 1 \
            --set-env-vars "LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }},LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},LIVEKIT_WS_URL=${{ secrets.LIVEKIT_WS_URL }}"

      - name: Update Cloud Run services
        run: |
          # APIサービスのURLを取得
          API_URL=$(gcloud run services describe api --region=${{ env.REGION }} --format="value(status.url)")

          # Webサービスの環境変数を更新
          gcloud run services update web \
            --region ${{ env.REGION }} \
            --update-env-vars "NEXT_PUBLIC_API_BASE=$API_URL"
