name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: radio24-project
  REGION: asia-northeast1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: radio24_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd apps/web
          pnpm install --frozen-lockfile

      - name: Run Go tests
        run: |
          cd services/api
          go test ./...
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: radio24_test

      - name: Run Go tests (host)
        run: |
          cd services/host
          go test ./...

      - name: Run frontend tests
        run: |
          cd apps/web
          pnpm test --passWithNoTests

      - name: Run linting
        run: |
          cd apps/web
          pnpm lint

  cloud-build-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Run Cloud Build test
        run: |
          gcloud builds submit \
            --config cloudbuild/cloudbuild-test.yaml \
            --substitutions _COMMIT_SHA=${{ github.sha }}

  cloud-build-deploy:
    needs: cloud-build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy with Cloud Build
        run: |
          gcloud builds submit \
            --config cloudbuild/cloudbuild.yaml \
            --substitutions _COMMIT_SHA=${{ github.sha }} \
            --substitutions _POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --substitutions _OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --substitutions _LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }} \
            --substitutions _LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}

      - name: Get service URLs
        run: |
          API_URL=$(gcloud run services describe api --region=${{ env.REGION }} --format="value(status.url)")
          WEB_URL=$(gcloud run services describe web --region=${{ env.REGION }} --format="value(status.url)")
          LIVEKIT_URL=$(gcloud run services describe livekit --region=${{ env.REGION }} --format="value(status.url)")

          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "WEB_URL=$WEB_URL" >> $GITHUB_ENV
          echo "LIVEKIT_URL=$LIVEKIT_URL" >> $GITHUB_ENV

          echo "ðŸš€ Deployment completed!"
          echo "API: $API_URL"
          echo "Web: $WEB_URL"
          echo "LiveKit: $LIVEKIT_URL"
