name: Release

on:
  push:
    tags:
      - "v*"

env:
  PROJECT_ID: radio24-project
  REGION: asia-northeast1
  REGISTRY: gcr.io

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push release images
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}

          # Build API image
          docker build -f infra/docker/api.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:$VERSION .
          docker build -f infra/docker/api.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:latest .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:latest

          # Build Web image
          docker build -f infra/docker/web.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:$VERSION .
          docker build -f infra/docker/web.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:latest .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:latest

          # Build Host image
          docker build -f infra/docker/host.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:$VERSION .
          docker build -f infra/docker/host.Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:latest .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:latest

          # Build LiveKit image
          docker build -f infra/livekit/Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/livekit:$VERSION infra/livekit/
          docker build -f infra/livekit/Dockerfile -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/livekit:latest infra/livekit/
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/livekit:$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/livekit:latest

      - name: Deploy to production
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}

          # Deploy API
          gcloud run deploy api \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:$VERSION \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }},POSTGRES_PORT=5432,POSTGRES_USER=${{ secrets.POSTGRES_USER }},POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }},POSTGRES_DB=${{ secrets.POSTGRES_DB }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }},LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}"

          # Deploy Web
          gcloud run deploy web \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:$VERSION \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --set-env-vars "NEXT_PUBLIC_API_BASE=${{ secrets.API_BASE_URL }},NEXT_PUBLIC_OPENAI_REALTIME_MODEL=gpt-realtime"

          # Deploy Host
          gcloud run deploy host \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:$VERSION \
            --platform managed \
            --region ${{ env.REGION }} \
            --no-allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 1 \
            --set-env-vars "LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }},LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},LIVEKIT_WS_URL=${{ secrets.LIVEKIT_WS_URL }}"

          # Deploy LiveKit
          gcloud run deploy livekit \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/livekit:$VERSION \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 7880 \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 3 \
            --set-env-vars "LIVEKIT_KEYS=${{ secrets.LIVEKIT_API_KEY }}: ${{ secrets.LIVEKIT_API_SECRET }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Release ${{ steps.version.outputs.VERSION }}

            This release includes:
            - Updated API service
            - Updated Web frontend
            - Updated Host service
            - Updated LiveKit service

            ## Deployment
            All services have been deployed to Google Cloud Run.

            ## Images
            - API: `${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api:${{ steps.version.outputs.VERSION }}`
            - Web: `${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/web:${{ steps.version.outputs.VERSION }}`
            - Host: `${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/host:${{ steps.version.outputs.VERSION }}`
            - LiveKit: `${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/livekit:${{ steps.version.outputs.VERSION }}`
          draft: false
          prerelease: false
