name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "apps/web/package-lock.json"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Run Go formatting check
        run: |
          cd services/api
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted. Run 'gofmt -s -w .' to fix."
            gofmt -s -l .
            exit 1
          fi

          cd ../host
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted. Run 'gofmt -s -w .' to fix."
            gofmt -s -l .
            exit 1
          fi

      - name: Run Go vet
        run: |
          cd services/api
          go vet ./...

          cd ../host
          go vet ./...

      - name: Run Go lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

          cd services/api
          golangci-lint run

          cd ../host
          golangci-lint run

      - name: Run TypeScript check
        run: |
          cd apps/web
          pnpm tsc --noEmit

      - name: Run ESLint
        run: |
          cd apps/web
          pnpm lint

      - name: Run Prettier check
        run: |
          cd apps/web
          pnpm prettier --check .

      - name: Check for TODO comments
        run: |
          if grep -r "TODO\|FIXME\|HACK" services/ apps/ --exclude-dir=vendor --exclude-dir=node_modules; then
            echo "Found TODO/FIXME/HACK comments. Please address them."
            exit 1
          fi

      - name: Check for hardcoded secrets
        run: |
          if grep -r "password\|secret\|key\|token" services/ apps/ --exclude-dir=vendor --exclude-dir=node_modules --exclude="*.md" | grep -v "getEnv\|os.Getenv"; then
            echo "Found potential hardcoded secrets. Please use environment variables."
            exit 1
          fi

      - name: Generate code coverage
        run: |
          cd services/api
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

          cd ../host
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./services/api/coverage.out,./services/host/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
