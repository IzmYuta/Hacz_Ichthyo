name: Performance Testing

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: "Target URL for performance testing"
        required: true
        default: "https://api-xxx.run.app"
        type: string
      test_type:
        description: "Type of performance test"
        required: true
        default: "load"
        type: choice
        options:
          - load
          - stress
          - spike
          - volume

jobs:
  performance-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance test
        run: |
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';

          export let errorRate = new Rate('errors');

          export let options = {
            stages: [
              { duration: '2m', target: 20 }, // Ramp up
              { duration: '5m', target: 20 }, // Stay at 20 users
              { duration: '2m', target: 0 },  // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<2000'], // 95% of requests must complete below 2s
              http_req_failed: ['rate<0.1'],     // Error rate must be below 10%
              errors: ['rate<0.1'],              // Custom error rate must be below 10%
            },
          };

          export default function () {
            // Health check
            let healthResponse = http.get('${{ github.event.inputs.target_url }}/health');
            check(healthResponse, {
              'health check status is 200': (r) => r.status === 200,
              'health check response time < 500ms': (r) => r.timings.duration < 500,
            });
            errorRate.add(healthResponse.status !== 200);

            sleep(1);

            // API endpoints
            let nowResponse = http.get('${{ github.event.inputs.target_url }}/v1/now');
            check(nowResponse, {
              'now endpoint status is 200': (r) => r.status === 200,
              'now endpoint response time < 1000ms': (r) => r.timings.duration < 1000,
            });
            errorRate.add(nowResponse.status !== 200);

            sleep(1);

            // Theme rotation
            let themeResponse = http.post('${{ github.event.inputs.target_url }}/v1/theme/rotate', '{}', {
              headers: { 'Content-Type': 'application/json' },
            });
            check(themeResponse, {
              'theme endpoint status is 200': (r) => r.status === 200,
              'theme endpoint response time < 1000ms': (r) => r.timings.duration < 1000,
            });
            errorRate.add(themeResponse.status !== 200);

            sleep(1);

            // Submission endpoint
            let submissionData = JSON.stringify({
              text: 'Test submission for performance testing',
              type: 'text'
            });
            let submissionResponse = http.post('${{ github.event.inputs.target_url }}/v1/submission', submissionData, {
              headers: { 'Content-Type': 'application/json' },
            });
            check(submissionResponse, {
              'submission endpoint status is 200': (r) => r.status === 200,
              'submission endpoint response time < 2000ms': (r) => r.timings.duration < 2000,
            });
            errorRate.add(submissionResponse.status !== 200);

            sleep(1);
          }
          EOF

          k6 run performance-test.js

      - name: Generate performance report
        run: |
          echo "Performance test completed for ${{ github.event.inputs.target_url }}"
          echo "Test type: ${{ github.event.inputs.test_type }}"
          echo "Target URL: ${{ github.event.inputs.target_url }}"

          # Create performance report
          cat > performance-report.md << 'EOF'
          # Performance Test Report

          ## Test Configuration
          - **Target URL**: ${{ github.event.inputs.target_url }}
          - **Test Type**: ${{ github.event.inputs.test_type }}
          - **Date**: $(date)

          ## Test Results
          - **Duration**: 9 minutes (2m ramp up + 5m steady + 2m ramp down)
          - **Max Users**: 20 concurrent users
          - **Thresholds**:
            - 95% of requests must complete below 2s
            - Error rate must be below 10%

          ## Endpoints Tested
          1. Health Check (`/health`)
          2. Now Playing (`/v1/now`)
          3. Theme Rotation (`/v1/theme/rotate`)
          4. Submission (`/v1/submission`)

          ## Recommendations
          - Monitor response times under load
          - Consider implementing caching for frequently accessed endpoints
          - Optimize database queries for better performance
          EOF

          cat performance-report.md
