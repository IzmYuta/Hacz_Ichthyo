name: Disaster Recovery

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Disaster recovery action"
        required: true
        default: "backup"
        type: choice
        options:
          - backup
          - restore
          - failover
          - test-restore
      backup_id:
        description: "Backup ID for restore operations"
        required: false
        type: string

env:
  PROJECT_ID: radio24-project
  REGION: asia-northeast1

jobs:
  disaster-recovery:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Create emergency backup
        if: github.event.inputs.action == 'backup'
        run: |
          BACKUP_ID="emergency-backup-$(date +%Y%m%d-%H%M%S)"

          # Create database backup
          gcloud sql backups create $BACKUP_ID \
            --instance=radio24-db \
            --description="Emergency backup created on $(date)"

          # Export to Cloud Storage
          EXPORT_FILE="emergency-export-$(date +%Y%m%d-%H%M%S).sql"
          gcloud sql export sql radio24-db \
            gs://radio24-backups/$EXPORT_FILE \
            --database=radio24 \
            --offload

          echo "Emergency backup created: $BACKUP_ID"
          echo "Export file: gs://radio24-backups/$EXPORT_FILE"

      - name: Restore from backup
        if: github.event.inputs.action == 'restore'
        run: |
          BACKUP_ID="${{ github.event.inputs.backup_id }}"

          if [ -z "$BACKUP_ID" ]; then
            echo "Backup ID is required for restore operation"
            exit 1
          fi

          # Restore database from backup
          gcloud sql backups restore $BACKUP_ID \
            --restore-instance=radio24-db \
            --backup-instance=radio24-db

          echo "Database restored from backup: $BACKUP_ID"

      - name: Test restore
        if: github.event.inputs.action == 'test-restore'
        run: |
          BACKUP_ID="${{ github.event.inputs.backup_id }}"

          if [ -z "$BACKUP_ID" ]; then
            echo "Backup ID is required for test restore operation"
            exit 1
          fi

          # Create test instance
          TEST_INSTANCE="radio24-test-$(date +%Y%m%d-%H%M%S)"

          gcloud sql instances create $TEST_INSTANCE \
            --database-version=POSTGRES_15 \
            --tier=db-f1-micro \
            --region=${{ env.REGION }} \
            --storage-type=SSD \
            --storage-size=10GB

          # Restore backup to test instance
          gcloud sql backups restore $BACKUP_ID \
            --restore-instance=$TEST_INSTANCE \
            --backup-instance=radio24-db

          # Test the restored database
          gcloud sql databases create radio24 \
            --instance=$TEST_INSTANCE

          # Run basic connectivity test
          gcloud sql connect $TEST_INSTANCE --database=radio24 --user=postgres --quiet << 'EOF'
          SELECT 1;
          EOF

          # Clean up test instance
          gcloud sql instances delete $TEST_INSTANCE --quiet

          echo "Test restore completed successfully"

      - name: Failover to backup region
        if: github.event.inputs.action == 'failover'
        run: |
          BACKUP_REGION="us-central1"

          # Create backup instance in different region
          BACKUP_INSTANCE="radio24-backup-$(date +%Y%m%d-%H%M%S)"

          gcloud sql instances create $BACKUP_INSTANCE \
            --database-version=POSTGRES_15 \
            --tier=db-f1-micro \
            --region=$BACKUP_REGION \
            --storage-type=SSD \
            --storage-size=10GB \
            --replica-type=READ \
            --master-instance-name=radio24-db

          # Update Cloud Run services to use backup region
          gcloud run services update api \
            --region=$BACKUP_REGION \
            --set-env-vars "POSTGRES_HOST=$BACKUP_INSTANCE"

          echo "Failover completed to region: $BACKUP_REGION"

      - name: Generate disaster recovery report
        run: |
          cat > disaster-recovery-report.md << 'EOF'
          # Disaster Recovery Report

          ## Action: ${{ github.event.inputs.action }}
          ## Date: $(date)
          ## Backup ID: ${{ github.event.inputs.backup_id }}

          ## Status: Completed

          ## Next Steps:
          1. Verify all services are running correctly
          2. Test critical functionality
          3. Monitor system performance
          4. Update documentation if needed

          ## Recovery Time Objective (RTO): 4 hours
          ## Recovery Point Objective (RPO): 1 hour
          EOF

          cat disaster-recovery-report.md
